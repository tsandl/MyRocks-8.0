jobs:
- job:
  timeoutInMinutes: 180
  displayName: Ubuntu Bionic
  pool:
    vmImage: 'ubuntu-18.04'

  variables:
    UBUNTU_CODE_NAME: bionic
    CCACHE_DIR: $(Pipeline.Workspace)/ccache
    CCACHE_COMPRESS: 1
    CCACHE_COMPRESSLEVEL: 9
    CCACHE_CPP2: 1

  strategy:
    matrix:
      Clang-9 Debug:
        Compiler: clang
        CompilerVer: 9
        BuildType: Debug
        SanitizerType: NoSan

      Clang-9 Release:
        Compiler: clang
        CompilerVer: 9
        BuildType: RelWithDebInfo
        SanitizerType: NoSan

      Clang-9 ASan:
        Compiler: clang
        CompilerVer: 9
        BuildType: Debug
        SanitizerType: ASan

      GCC-9 Debug:
        Compiler: gcc
        CompilerVer: 9
        BuildType: Debug
        SanitizerType: NoSan

      GCC-9 Release:
        Compiler: gcc
        CompilerVer: 9
        BuildType: RelWithDebInfo
        SanitizerType: NoSan

      GCC-9 ASan:
        Compiler: gcc
        CompilerVer: 9
        BuildType: Debug
        SanitizerType: ASan

  steps:
  - checkout: self
    submodules: true
  - script: |
      if [[ "$(Compiler)" == "clang" ]]; then
        CC=clang-$(CompilerVer)
        CXX=clang++-$(CompilerVer)
      else
        CC=gcc-$(CompilerVer)
        CXX=g++-$(CompilerVer)
      fi

      echo CC=$CC CXX=$CXX BuildType=$(BuildType) Ubuntu=$UBUNTU_CODE_NAME
      echo --- Configure required LLVM and Ubuntu Toolchain repositories
      if [[ "$CC" == clang* ]]; then
         PACKAGES="llvm-$(CompilerVer)-dev"
         curl -sSL "http://apt.llvm.org/llvm-snapshot.gpg.key" | sudo -E apt-key add -
         echo "deb http://apt.llvm.org/$UBUNTU_CODE_NAME/ llvm-toolchain-$UBUNTU_CODE_NAME-$(CompilerVer) main" | sudo tee -a /etc/apt/sources.list > /dev/null
      fi

      echo --- Update list of packages and download dependencies
      sudo -E apt-add-repository -y "ppa:ubuntu-toolchain-r/test"
      sudo -E apt-get -yq update >> ~/apt-get-update.log 2>&1
      sudo -E apt-get -yq --no-install-suggests --no-install-recommends install $CXX $PACKAGES cmake cmake-curses-gui ccache bison libncurses5-dev libaio-dev libmecab-dev libnuma-dev libssl-dev libreadline-dev || exit 1
      sudo -E apt-get -yq --no-install-suggests --no-install-recommends install libedit-dev liblz4-dev libzstd-dev libre2-dev libicu-dev libevent-dev libprotoc-dev protobuf-compiler || exit 1

      UPDATE_TIME=$SECONDS
      echo --- Packages updated in $UPDATE_TIME seconds.

      $CC -v
      $CXX -v
      ccache --version
      ccache --print-config
      ccache --zero-stats

      echo '##vso[task.setvariable variable=CC]'$CC
      echo '##vso[task.setvariable variable=CXX]'$CXX
      echo '##vso[task.setvariable variable=UPDATE_TIME]'$UPDATE_TIME

    displayName: '*** Install Build Dependencies'

  - task: CacheBeta@0
    continueOnError: true
    inputs:
      key: ccache | $(Agent.OS)-$(Compiler)-$(CompilerVer)-$(BuildType)-$(SanitizerType) | $(Build.SourceVersion)
      restoreKeys: ccache | $(Agent.OS)-$(Compiler)-$(CompilerVer)-$(BuildType)-$(SanitizerType)
      path: $(CCACHE_DIR)
    displayName: '*** Download ccached data'

  - script: |
      echo --- Set cmake parameters
      if [[ "$(SanitizerType)" == "ASan" ]]; then
        SANITIZER_DEFINES="-DWITH_ASAN=ON -DWITH_ASAN_SCOPE=ON"
      else
        SANITIZER_DEFINES=""
      fi
      CMAKE_OPT="
        -DCMAKE_BUILD_TYPE=$(BuildType)
        -DBUILD_CONFIG=mysql_release
        -DFEATURE_SET=community
        -DENABLE_DOWNLOADS=1
        -DDOWNLOAD_BOOST=1
        -DWITH_BOOST=../deps
        -DMYSQL_MAINTAINER_MODE=ON
        -DWITH_SYSTEM_LIBS=ON
        -DWITH_LZ4=bundled
        -DWITH_ZSTD=bundled
        -DWITH_MECAB=system
        -DWITH_NUMA=ON
        $SANITIZER_DEFINES
        -DCMAKE_C_COMPILER_LAUNCHER=/usr/bin/ccache
        -DCMAKE_CXX_COMPILER_LAUNCHER=/usr/bin/ccache
      "

      echo --- CMAKE_OPT=\"$CMAKE_OPT\"
      mkdir bin; cd bin
      CC=$CC CXX=$CXX cmake .. $CMAKE_OPT || exit 1

      CMAKE_TIME=$SECONDS
      echo --- CMake took $CMAKE_TIME seconds. Packages updated in $UPDATE_TIME seconds.

      echo '##vso[task.setvariable variable=CMAKE_TIME]'$CMAKE_TIME

    displayName: '*** cmake .. -DCMAKE_BUILD_TYPE=$(BuildType)'

  - script: |
      df -h
      cd bin
      make -j2 || exit 1
      ccache --show-stats
      df -h

      BUILD_TIME=$SECONDS
      echo --- Total time $(($BUILD_TIME + $UPDATE_TIME + $CMAKE_TIME)) seconds. Build time $BUILD_TIME seconds. CMake took $CMAKE_TIME seconds. Packages updated in $UPDATE_TIME seconds.

    displayName: '*** Compile'
